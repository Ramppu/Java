import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.*;
import java.util.Scanner;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

public class Tekstiediittori {
	public static void main (String args[]) {
		JFrame frame = new JFrame("Teksiediittori");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		//Frame dimentions
		frame.setSize(500,500);
		
		JPanel panel = new JPanel();
		frame.getContentPane().add(panel, BorderLayout.CENTER);
		panel.setLayout(new BorderLayout(0, 0));
		
		JToolBar toolBar = new JToolBar();
		panel.add(toolBar, BorderLayout.NORTH);
		
		JButton btnSave = new JButton("save");
		toolBar.add(btnSave);
		
		JButton btnOpen = new JButton("open");
		toolBar.add(btnOpen);
		
		JButton btnCut = new JButton("cut");
		toolBar.add(btnCut);
		
		JTextArea txtrEka = new JTextArea();
		panel.add(txtrEka, BorderLayout.CENTER);
		
		//Menu
		JMenuBar menuBar = new JMenuBar();
		frame.getContentPane().add(menuBar, BorderLayout.NORTH);
		
		JMenu mnTiedosto = new JMenu("Tiedosto");
		menuBar.add(mnTiedosto);
		
		JMenuItem mntmAvaa = new JMenuItem("Avaa");
		mnTiedosto.add(mntmAvaa);
		
		JMenuItem mntmTallenna = new JMenuItem("Tallenna");
		mntmTallenna.addActionListener(new ActionListener() {
		     public void actionPerformed(ActionEvent e) {                
                 JFileChooser fc = new JFileChooser();
                 fc.setDialogTitle("Save to a text file");
                 fc.setApproveButtonText("Save");
                 fc.setApproveButtonToolTipText("Save to a file");
                 fc.showOpenDialog(null);
                 String newFile = fc.getSelectedFile().getAbsolutePath();
                 File file = new File(newFile);
                 
                 try {
                     PrintWriter pw = new PrintWriter(file);
                     String content = txtrEka.getText();
                     pw.println(content);
                     
                     pw.flush();
                     pw.close();
                 }
                 catch (IOException e1) {

                 }
     } 
		});
		
		mnTiedosto.add(mntmTallenna);
		
		JMenuItem mntmTyhjenn = new JMenuItem("Tyhjenn\u00E4");
		mntmTyhjenn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				txtrEka.setText(null);
			}
		});
		mnTiedosto.add(mntmTyhjenn);
		
		JMenuItem mntmLopeta = new JMenuItem("Lopeta");
		mntmLopeta.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		mnTiedosto.add(mntmLopeta);
		
		JMenu mnMuokkaa = new JMenu("Muokkaa");
		menuBar.add(mnMuokkaa);
		
		JMenuItem mntmEtsi = new JMenuItem("Etsi");
		mnMuokkaa.add(mntmEtsi);
		
		JMenuItem mntmKorvaa = new JMenuItem("Korvaa");
		mnMuokkaa.add(mntmKorvaa);
		
		JMenu mnListietoa = new JMenu("Lis\u00E4tietoa");
		menuBar.add(mnListietoa);
		
		JMenuItem mntmTekij = new JMenuItem("Tekij\u00E4");
		mntmTekij.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(null, "Alkete Ademaj","Tekijä", JOptionPane.INFORMATION_MESSAGE);
			}
		});
		mnListietoa.add(mntmTekij);
		
		mntmAvaa.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser Kokeilija = new JFileChooser();
				Kokeilija.showOpenDialog(null);
				
				String newFile = Kokeilija.getSelectedFile().getAbsolutePath(); 
				File KanaFile1 = new File (newFile);

				try {
					Scanner lukija = new Scanner(KanaFile1);
					while (lukija.hasNextLine()) {
						String y = lukija.nextLine();
						txtrEka.append(y+"\n");
					}
					lukija.close();
				}
				catch (FileNotFoundException e1) {
					e1.printStackTrace();
				}
			}
		});
		
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {	
				JFileChooser Valitsija = new JFileChooser(); 
				Valitsija.setDialogTitle("Saveth");
				Valitsija.setApproveButtonText("Openth");
				Valitsija.setApproveButtonToolTipText("Openth selected fileth");
				Valitsija.showOpenDialog(null);
				
				String newFile = Valitsija.getSelectedFile().getAbsolutePath(); 
				File KanaFile = new File (newFile);
				try {
					PrintWriter write = new PrintWriter(KanaFile);
					String talteen =  txtrEka.getText();
					write.println(talteen);
					write.flush();
					write.close();
				}
				
				catch (Exception e) {
					
				}
			}
		});
		
		btnOpen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser Kokeilija = new JFileChooser();
				Kokeilija.showOpenDialog(null);
				
				File Kanafile1 = new File(Kokeilija.getSelectedFile().getAbsolutePath());
				try {
					Scanner lukija = new Scanner(Kanafile1);
					while (lukija.hasNextLine()) {
						String y = lukija.nextLine();
						txtrEka.append(y+"\n");
					}
					lukija.close();
				}
				catch (FileNotFoundException e1) {
					e1.printStackTrace();
				}
			}
		});
		
		btnCut.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String kaikki = txtrEka.getText();
				String word = JOptionPane.showInputDialog(null,"Which word do you want to cut?");
				int arvo = kaikki.indexOf;
				try {
					txtrEka.replaceRange("", arvo,(arvo + word.length()));
				}
				catch (Exception e1) {
					JOptionPane.showMessageDialog(null, "There is no such word in the file!", "Error", JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		
		frame.setVisible(true);
}
}